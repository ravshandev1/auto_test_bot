import requests
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from states import Register, Feedback, Subscribe
from config import get_user_lang, append_user, API, set_users, bot
from keyboards import main_btn, lang_btn, phone_btn, back_btn, pay_btn

router = Router()


@router.message(F.text == '/start')
async def start(mes: types.Message, state: FSMContext):
    res = requests.get(url=f"{API}/user/{mes.from_user.id}/")
    if res.status_code == 200:
        r = requests.get(url=f"{API}/information/")
        r = r.json()
        if get_user_lang(mes.from_user.id) == 'uz':
            await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_uz'],
                                   reply_markup=main_btn('uz', mes.from_user.id))
        else:
            await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_ru'],
                                   reply_markup=main_btn('ru', mes.from_user.id))
    elif res.status_code == 404:
        await mes.answer(
            f"–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, {mes.from_user.full_name}!\n–ê–≤—Ç–æ—à–∫–æ–ª–∞ —Ç–µ—Å—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥",
            reply_markup=lang_btn)
        await state.set_state(Register.lang)
    else:
        await mes.answer("Server ishlamayabdi\n–°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


@router.callback_query(Register.lang)
async def lang(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    append_user({'telegram_id': call.from_user.id, 'lang': call.data})
    if call.data == 'uz':
        await call.message.answer("–ò—Å–º —Ñ–∞–º–∏–ª–∏—è–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
    elif call.data == 'ru':
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.")
    await state.update_data({'lang': call.data, 'telegram_id': call.from_user.id})
    await state.set_state(Register.name)
    await call.answer(cache_time=1)


@router.message(Register.name)
async def name(mes: types.Message, state: FSMContext):
    await state.update_data({'name': mes.text})
    if get_user_lang(mes.from_user.id) == 'uz':
        await mes.answer("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.", reply_markup=phone_btn('uz'))
    else:
        await mes.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=phone_btn('ru'))
    await state.set_state(Register.phone_number)


@router.message(Register.phone_number)
async def phone(mes: types.Message, state: FSMContext):
    r = requests.get(url=f"{API}/information/")
    r = r.json()
    data = await state.get_data()
    if mes.contact:
        data['phone_number'] = mes.contact.phone_number
    else:
        data['phone_number'] = mes.text
    res = requests.post(url=f"{API}/", data=data)
    if res.status_code == 200:
        if get_user_lang(mes.from_user.id) == 'uz':
            await mes.answer("Assalomu alaykum", reply_markup=main_btn('uz', mes.from_user.id))
            await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_uz'],
                                   reply_markup=main_btn('uz', mes.from_user.id))
        else:
            await mes.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", reply_markup=main_btn('ru', mes.from_user.id))
            await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_ru'],
                                   reply_markup=main_btn('ru', mes.from_user.id))
    else:
        await mes.answer("Xato\n–û—à–∏–±–∫–∞")
    await state.clear()


@router.callback_query(F.data.in_(['uz', 'ru']))
async def set_lang(call: types.CallbackQuery):
    r = requests.patch(url=f"{API}/", data={'telegram_id': call.from_user.id, 'lang': call.data})
    if r.status_code == 200:
        set_users(r.json())
    r = requests.get(url=f"{API}/information/")
    r = r.json()
    if call.data == 'uz':
        await call.message.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_uz'],
                                        reply_markup=main_btn('uz', call.from_user.id))
    else:
        await call.message.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_ru'],
                                        reply_markup=main_btn('ru', call.from_user.id))
    await call.answer(cache_time=1)


@router.message(F.text.in_(["üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞", "üîÑ –¢–∏–ª–Ω–∏ –∞–ª–º–∞—à—Ç–∏—Ä–∏—à"]))
async def change_lang(mes: types.Message):
    await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥", reply_markup=lang_btn)


@router.message(F.text.in_(["‚úçÔ∏è –ú—É—Ä–æ–∂–∞—Ç “õ–∏–ª–∏–Ω–≥!", "‚úçÔ∏è –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"]))
async def feedback(mes: types.Message, state: FSMContext):
    if mes.text == "‚úçÔ∏è –ú—É—Ä–æ–∂–∞—Ç “õ–∏–ª–∏–Ω–≥!":
        await mes.answer(
            "–£—à–±—É –±—û–ª–∏–º–¥–∞ –°–∏–∑ –¢–µ—Å—Ç —Å–∞–≤–æ–ª–ª–∞—Ä–∏ –±—û–π–∏—á–∞ –º—É—Ä–æ–∂–∞—Ç “õ–∏–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω!\n–é—Ä–≥–∞–Ω–∏—à–∏–Ω–≥–∏–∑–≥–∞ “õ–∏–π–∏–Ω –±—û–ª–≥–∞–Ω –¢–µ—Å—Ç —Å–∞–≤–æ–ª–∏ –±—û–π–∏—á–∞ –±–∏–∑–≥–∞ –º—É—Ä–æ–∂–∞—Ç “õ–∏–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω!\n–•–∞–±–∞—Ä —ë–∑–≥–∞–Ω–∏–Ω–≥–∏–∑–¥–∞ –°–∏–∑–≥–∞ –º—É—Ä–æ–∂–∞—Ç “õ–∏–ª–∞ –æ–ª–∏—à–∏–º–∏–∑ —É—á—É–Ω —û–∑ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ “≥–∞–º —ë–∑–∏–± “õ–æ–ª–¥–∏—Ä–∏–Ω–≥!",
            reply_markup=back_btn('uz'))
    else:
        await mes.answer(
            "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç–µ—Å—Ç–æ–≤!\n–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ —Ç–µ—Å—Ç–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ!\n–ß—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –í–∞–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã!",
            reply_markup=back_btn('ru'))
    await state.set_state(Feedback.text)


@router.message(Feedback.text)
async def feedback_text(mes: types.Message, state: FSMContext):
    r = requests.get(url=f"{API}/information/")
    r = r.json()
    if (mes.text != "üîô –û—Ä—Ç–≥–∞") and (mes.text != "üîô –ù–∞–∑–∞–¥"):
        requests.post(url=f"{API}/feedback/{mes.from_user.id}/", data={'message': mes.text})
        if get_user_lang(mes.from_user.id) == 'uz':
            await mes.answer("‚úÖ –•–∞–±–∞—Ä —é–±–æ—Ä–∏–ª–¥–∏, —ç—Ç–∏–±–æ—Ä–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞—Ö–º–∞—Ç.")
        else:
            await mes.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ.")
    if get_user_lang(mes.from_user.id) == 'uz':
        await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_uz'],
                               reply_markup=main_btn('uz', mes.from_user.id))
    else:
        await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_ru'],
                               reply_markup=main_btn('ru', mes.from_user.id))
    await state.clear()


@router.message(F.text.in_(["üóì –û–±—É–Ω–∞–Ω–∏ –∞–∫—Ç–∏–≤–ª–∞—à—Ç–∏—Ä–∏–Ω–≥", "üóì –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"]))
async def edit_profile(mes: types.Message, state: FSMContext):
    r = requests.get(url=f"{API}/check/{mes.from_user.id}/")
    rates = requests.get(url=f"{API}/rates/")
    markup = ReplyKeyboardBuilder()
    if get_user_lang(mes.from_user.id) == 'uz':
        for i in rates.json():
            markup.button(text=i['name_uz'])

        markup.button(text="üîô –û—Ä—Ç–≥–∞")
        markup.adjust(1, 1, 1, 1)
        if r.status_code == 400:
            await mes.answer(
                "–•–æ–∑–∏—Ä—á–∞ –æ–±—É–Ω–∞–Ω–≥–∏–∑ –∞–∫—Ç–∏–≤ —Ö–æ–ª–∞—Ç–¥–∞ —ç–º–∞—Å.\n–û–±—É–Ω–∞–Ω–≥–∏–∑–Ω–∏ –∞–∫—Ç–∏–≤–ª–∞—à—Ç–∏—Ä–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç–∞—Ä–∏—Ñ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        elif r.status_code == 200:
            await mes.answer(
                f"–°–∏–∑–Ω–∏–Ω–≥ –æ–±—É–Ω–∞–Ω–≥–∏–∑: {r.json()['end_at']} –≥–∞—á–∞ –∞–º–∞–ª “õ–∏–ª–∞–¥–∏:\n–£–∑–∞–π—Ç–∏—Ä–º–æ“õ—á–∏ –±—û–ª—Å–∞–Ω–≥–∏–∑ “õ—É–π–∏–¥–∞–≥–∏ —Ç–∞—Ä–∏—Ñ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        else:
            await mes.answer("Xato")
    else:
        for i in rates.json():
            markup.button(text=i['name_ru'])
        markup.button(text="üîô –ù–∞–∑–∞–¥")
        markup.adjust(1, 1, 1, 1)
        if r.status_code == 400:
            await mes.answer(
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        elif r.status_code == 200:
            await mes.answer(
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≥–æ–¥–µ–Ω –¥–æ: {r.json()['end_at']}\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        else:
            await mes.answer("–û—à–∏–±–∫–∞")
    await state.set_state(Subscribe.rate)


@router.message(Subscribe.rate)
async def buy_rate(mes: types.Message, state: FSMContext):
    r = requests.get(url=f"{API}/information/")
    r = r.json()
    if mes.text == "üîô –û—Ä—Ç–≥–∞":
        await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_uz'],
                               reply_markup=main_btn('uz', mes.from_user.id))
        await state.clear()
    elif mes.text == "üîô –ù–∞–∑–∞–¥":
        await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_ru'],
                               reply_markup=main_btn('ru', mes.from_user.id))
        await state.clear()
    else:
        rates = requests.get(url=f"{API}/rates/")
        for i in rates.json():
            if i['name_uz'] == mes.text or i['name_ru'] == mes.text:
                await state.update_data({'name': mes.text, 'price': i['price'], 'id': i['id']})
        payment_types = requests.get(url=f"{API}/payment-types/")
        markup = ReplyKeyboardBuilder()
        for i in payment_types.json():
            markup.button(text=i['name'])
        markup.adjust(2)
        if get_user_lang(mes.from_user.id) == 'uz':
            markup.button(text="üîô –û—Ä—Ç–≥–∞")
            await mes.answer("–¢—û–ª–æ–≤ —É—Å—É–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                             reply_markup=markup.as_markup(resize_keyboard=True))
        else:
            markup.button(text="üîô –ù–∞–∑–∞–¥")
            await mes.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                             reply_markup=markup.as_markup(resize_keyboard=True))
        await state.set_state(Subscribe.payment_type)


@router.message(Subscribe.payment_type)
async def payment_type(mes: types.Message, state: FSMContext):
    if mes.text == "üîô –û—Ä—Ç–≥–∞":
        r = requests.get(url=f"{API}/check/{mes.from_user.id}/")
        rates = requests.get(url=f"{API}/rates/")
        markup = ReplyKeyboardBuilder()
        for i in rates.json():
            markup.button(text=i['name_uz'])
        markup.button(text="üîô –û—Ä—Ç–≥–∞")
        if r.status_code == 400:
            await mes.answer(
                "–•–æ–∑–∏—Ä—á–∞ –æ–±—É–Ω–∞–Ω–≥–∏–∑ –∞–∫—Ç–∏–≤ —Ö–æ–ª–∞—Ç–¥–∞ —ç–º–∞—Å.\n–û–±—É–Ω–∞–Ω–≥–∏–∑–Ω–∏ –∞–∫—Ç–∏–≤–ª–∞—à—Ç–∏—Ä–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ —Ç–∞—Ä–∏—Ñ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        elif r.status_code == 200:
            await mes.answer(
                f"–°–∏–∑–Ω–∏–Ω–≥ –æ–±—É–Ω–∞–Ω–≥–∏–∑: {r.json()['end_at']} –≥–∞—á–∞ –∞–º–∞–ª “õ–∏–ª–∞–¥–∏:\n–£–∑–∞–π—Ç–∏—Ä–º–æ“õ—á–∏ –±—û–ª—Å–∞–Ω–≥–∏–∑ “õ—É–π–∏–¥–∞–≥–∏ —Ç–∞—Ä–∏—Ñ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        else:
            await mes.answer("Xato")
        await state.set_state(Subscribe.rate)
    elif mes.text == "üîô –ù–∞–∑–∞–¥":
        r = requests.get(url=f"{API}/check/{mes.from_user.id}/")
        rates = requests.get(url=f"{API}/rates/")
        markup = ReplyKeyboardBuilder()
        for i in rates.json():
            markup.button(text=i['name_ru'])
        markup.button(text="üîô –ù–∞–∑–∞–¥")
        if r.status_code == 400:
            await mes.answer(
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        elif r.status_code == 200:
            await mes.answer(
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≥–æ–¥–µ–Ω –¥–æ: {r.json()['end_at']}\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
                reply_markup=markup.as_markup(resize_keyboard=True))
        else:
            await mes.answer("–û—à–∏–±–∫–∞")
        await state.set_state(Subscribe.rate)
    else:
        payment_types = requests.get(url=f"{API}/payment-types/")
        data = await state.get_data()
        for i in payment_types.json():
            if i['name'] == mes.text:
                data['token'] = i['token']
                data['p_name'] = i['name']
                await state.update_data({'provider_id': i['id']})
        if get_user_lang(mes.from_user.id) == 'uz':
            title = f"{data['name']} —É—á—É–Ω —Ç—û–ª–æ–≤"
            description = f"{data['name']} —É—á—É–Ω {data['price']} —Å—û–º —Ç—û–ª–æ–≤–Ω–∏ {data['p_name']} –æ—Ä“õ–∞–ª–∏ —Ç—û–ª–∞—à —É—á—É–Ω “≥–∏—Å–æ–±"

        else:
            title = f"{data['name']} –æ–ø–ª–∞—Ç–∞ –∑–∞"
            description = f"{data['name']} –∑–∞ {data['price']} –æ–ø–ª–∞—Ç–∞ —Å—É–º {data['p_name']} —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã"
        await mes.answer(title, reply_markup=types.ReplyKeyboardRemove())
        summa = types.LabeledPrice(label=title, amount=int(data['price']) * 100)
        await bot.send_invoice(
            mes.chat.id,
            title=title,
            description=description,
            payload='INVOICE',
            provider_token=data['token'],
            currency='UZS',
            prices=[summa],
            reply_markup=pay_btn(get_user_lang(mes.from_user.id)),
        )
        await state.set_state(Subscribe.checkout)


@router.pre_checkout_query(Subscribe.checkout, lambda query: True)
async def pre_checkout_query(query: types.PreCheckoutQuery, state: FSMContext):
    await bot.answer_pre_checkout_query(query.id, ok=True)
    await state.set_state(Subscribe.success)


@router.message(Subscribe.success)
async def successful_payment(mes: types.Message, state: FSMContext):
    await mes.delete()
    data = await state.get_data()
    pay = requests.post(url=f"{API}/buy/{mes.from_user.id}/",
                        data={"id": data['id'], 'provider_id': data['provider_id']})
    r = requests.get(url=f"{API}/information/")
    r = r.json()
    if get_user_lang(mes.from_user.id) == 'uz':
        await mes.answer(f"‚úÖ–¢–∞–±—Ä–∏–∫–ª–∞–π–º–∏–∑! –°–∏–∑–Ω–∏–Ω–≥ –æ–±—É–Ω–∞–Ω–≥–∏–∑ {pay.json()['end_at']} –≥–∞—á–∞ –∞–∫—Ç–∏–≤")
        await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_uz'],
                               reply_markup=main_btn('uz', mes.from_user.id))
    else:
        await mes.answer(f"‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {pay.json()['end_at']}")
        await mes.answer_photo(photo=types.FSInputFile(r['image']), caption=r['text_ru'],
                               reply_markup=main_btn('ru', mes.from_user.id))
    await state.clear()


@router.callback_query(F.data == '‚ùå')
async def back(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    payment_types = requests.get(url=f"{API}/payment-types/")
    markup = ReplyKeyboardBuilder()
    for i in payment_types.json():
        markup.button(text=i['name'])
    markup.adjust(2)
    if get_user_lang(call.from_user.id) == "uz":
        markup.button(text="üîô –û—Ä—Ç–≥–∞")
        await call.message.answer("–¢—û–ª–æ–≤ —É—Å—É–ª–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=markup.as_markup(resize_keyboard=True))
    else:
        markup.button(text="üîô –ù–∞–∑–∞–¥")
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup.as_markup(resize_keyboard=True))
    await state.set_state(Subscribe.payment_type)
    await call.answer(cache_time=1)
